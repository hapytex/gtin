-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package gtin
@version 0.1.0.0


-- | The module exposes a <a>GTIN</a> data type that contains the number of
--   digits as well.
module Data.Trade.GTIN

-- | A datatype for <i>Global Trade Item Numbers <a>GTIN</a></i> with
--   arbitrary "width" (up to nineteen digits technically possible).
newtype GTIN (n :: Natural)
GTIN :: Word64 -> GTIN (n :: Natural)

-- | Constructing a 'GTIN" with bound and checksum checks.
gtin :: forall i n. ((<=) n 19, Integral i, KnownNat n) => i -> Maybe (GTIN n)

-- | A type alias for a <a>GTIN</a> number with fourteen numbers, with as
--   range <tt>00 0000 0000 0000</tt>–<tt>99 9999 9999 9997</tt>.
type GTIN14 = GTIN 14

-- | A type alias for a <a>GTIN</a> number with thirteen numbers, with as
--   range <tt>0 0000 0000 0000</tt>–<tt>9 9999 9999 9994</tt>.
type GTIN13 = GTIN 13

-- | A type alias for a <a>GTIN</a> number with twelve numbers, with as
--   range <tt>0000 0000 0000</tt>–<tt>9999 9999 9993</tt>.
type GTIN12 = GTIN 12

-- | A type alias for a <a>GTIN</a> number with eight numbers, with as
--   range <tt>0000 0000</tt>–<tt>9999 9995</tt>.
type GTIN8 = GTIN 8

-- | A type alias for a <a>GTIN</a> number with fourteen numbers, with as
--   range <tt>00 0000 0000 0000</tt>–<tt>99 9999 9999 9997</tt>.
type EANUCC14 = GTIN14

-- | A type alias for a <a>GTIN</a> number with fourteen numbers, with as
--   range <tt>00 0000 0000 0000</tt>–<tt>99 9999 9999 9997</tt>.
type SCC14 = GTIN14

-- | A type alias for a <a>GTIN</a> number with thirteen numbers, with as
--   range <tt>0 0000 0000 0000</tt>–<tt>9 9999 9999 9994</tt>.
type EAN = GTIN13

-- | A type alias for a <a>GTIN</a> number with thirteen numbers, with as
--   range <tt>0 0000 0000 0000</tt>–<tt>9 9999 9999 9994</tt>.
type EANUCC13 = GTIN13

-- | A type alias for a <a>GTIN</a> with thirtheen numbers which is also an
--   ISBN number, with as range <tt>0 0000 0000 0000</tt>–<tt>9 9999 9999
--   9994</tt>.
type ISBN = GTIN13

-- | A type alias for a <a>GTIN</a> with thirtheen numbers which is also an
--   ISBN number, with as range <tt>0 0000 0000 0000</tt>–<tt>9 9999 9999
--   9994</tt>.
type ISBN13 = GTIN13

-- | A type alias for a <a>GTIN</a> number with eight numbers, with as
--   range <tt>0000 0000</tt>–<tt>9999 9995</tt>.
type EANUCC8 = GTIN8

-- | A type alias for a <a>GTIN</a> number with seventeen numbers, with as
--   range <tt>0 0000 0000 0000 0000</tt>–<tt>9 9999 9999 9999 9992</tt>.
type GSIN = GTIN 17

-- | A type alias for a <a>GTIN</a> number with eighteen numbers, with as
--   range <tt>00 0000 0000 0000 0000</tt>–<tt>99 9999 9999 9999 9995</tt>.
type SSCC = GTIN 18

-- | Check if two <a>GTIN</a> numbers, possibly with a different "width"
--   are equivalent.
equivGTIN :: GTIN m -> GTIN n -> Bool

-- | Convert one <a>GTIN</a> into a <a>GTIN</a> that has more digits. The
--   new <a>GTIN</a> will have additional leading zeros.
upscaleGTIN :: (<=) m n => GTIN m -> GTIN n

-- | Fix the checksum of a given <a>GTIN</a> object. If the checksum is
--   valid, then it will return the same GTIN, this operation is thus
--   <i>idempotent</i>.
fixChecksum :: GTIN n -> GTIN n

-- | Check if the given checksum matches.
checkChecksum :: GTIN n -> Bool

-- | Convert the given <a>GTIN</a> number to convert to a <a>String</a>
--   that groups numbers into groups of four.
gtinToString :: KnownNat n => GTIN n -> String

-- | Convert a given integral number that contains an ISBN-10 number into
--   the <a>ISBN13</a> equivalent. For example <tt>8175257660</tt> is
--   converted to <tt>9 7881 7525 7665</tt>. This will add a <tt>978</tt>
--   prefix, and recalculate the checksum.
fromISBN10' :: Integral i => i -> ISBN13

-- | A parser for a gtin number with an arbitrary number of digits between
--   two and nineteen. the parser forces the stream to <i>end</i> after the
--   gtin, and validates if the gtin is indeed valid. The parser parses the
--   number of digits with an arbitrary number of spaces between any two
--   digits.
gtinParser :: forall s u m n. ((<=) 2 n, (<=) n 19, KnownNat n, Stream s m Char) => ParsecT s u m (GTIN n)

-- | A parser for a gtin number with an arbitrary number of digits between
--   two and nineteen. the parser does not <i>end</i> after the gtin (so no
--   <a>eof</a> is required). The GTIN is validated, so if the checksum
--   does not match, the parser fails. The parser parses the number of
--   digits with an arbitrary number of spaces between any two digits.
gtinParser_ :: forall s u m n. ((<=) 2 n, (<=) n 19, KnownNat n, Stream s m Char) => ParsecT s u m (GTIN n)

-- | A parser for a gtin number with an arbitrary number of digits between
--   two and nineteen. the parser forces the stream to <i>end</i> after the
--   gtin, but does <i>not</i> validate if the gtin is indeed valid. The
--   parser parses the number of digits with an arbitrary number of spaces
--   between any two digits.
gtinParser' :: forall s u m n. ((<=) 2 n, (<=) n 19, KnownNat n, Stream s m Char) => ParsecT s u m (GTIN n)

-- | A parser for a gtin number with an arbitrary number of digits between
--   two and nineteen. the parser does not <i>end</i> after the gtin (so no
--   <a>eof</a> is required), and furthermore does <i>not</i> validate if
--   the gtin is indeed valid. The parser parses the number of digits with
--   an arbitrary number of spaces between any two digits.
gtinParser_' :: forall s u m n. ((<=) 2 n, (<=) n 19, KnownNat n, Stream s m Char) => ParsecT s u m (GTIN n)

-- | Run the <a>gtinParser_'</a> parser and thus parses a <a>GTIN</a> with
--   an arbitrary number of digits. The parser requires the stream to end
--   after the <a>GTIN</a>, and validates the checksum.
parseGTIN :: forall n s. ((<=) 2 n, (<=) n 19, KnownNat n, Stream s Identity Char) => s -> Either ParseError (GTIN n)

-- | Run the <a>gtinParser_'</a> parser and thus parses a <a>GTIN</a> with
--   an arbitrary number of digits. The parser does not require the stream
--   to end after the <a>GTIN</a>, but validates the checksum.
parseGTIN_ :: forall n s. ((<=) 2 n, (<=) n 19, KnownNat n, Stream s Identity Char) => s -> Either ParseError (GTIN n)

-- | Run the <a>gtinParser_'</a> parser and thus parses a <a>GTIN</a> with
--   an arbitrary number of digits. The parser requires the stream to end
--   after the <a>GTIN</a>, but does <i>not</i> validate the checksum.
parseGTIN' :: forall n s. ((<=) 2 n, (<=) n 19, KnownNat n, Stream s Identity Char) => s -> Either ParseError (GTIN n)

-- | Run the <a>gtinParser_'</a> parser and thus parses a <a>GTIN</a> with
--   an arbitrary number of digits. The parser does not require the stream
--   to end after the <a>GTIN</a>, and does <i>not</i> validate the
--   checksum.
parseGTIN_' :: forall n s. ((<=) 2 n, (<=) n 19, KnownNat n, Stream s Identity Char) => s -> Either ParseError (GTIN n)

-- | A function that constructs a <a>GTIN</a> expression or pattern based
--   on a given string. The <a>Proxy</a> parameter is used to specify the
--   number of digits of the <a>GTIN</a> number.
gtinQ :: forall n. ((<=) 2 n, (<=) n 19, KnownNat n) => Proxy (GTIN n) -> QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>GTIN14</a> number.
gtin14Q :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>GTIN13</a> number.
gtin13Q :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>GTIN12</a> number.
gtin12Q :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>GTIN8</a> number.
gtin8Q :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>EANUCC8</a> number.
eanucc8Q :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>EANUCC14</a> number.
eanucc14Q :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>SCC14</a> number.
scc14Q :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>EAN</a> number.
eanQ :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>EANUCC13</a> number.
eanucc13Q :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for a <a>GSIN</a> number.
gsinQ :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>SSCC</a> number.
ssccQ :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>ISBN</a> number, only the thirteen
--   digit number is supported.
isbnQ :: QuasiQuoter

-- | A <a>QuasiQuoter</a> for an <a>ISBN13</a> number.
isbn13Q :: QuasiQuoter
instance GHC.Read.Read (Data.Trade.GTIN.GTIN n)
instance GHC.Classes.Ord (Data.Trade.GTIN.GTIN n)
instance GHC.Generics.Generic (Data.Trade.GTIN.GTIN n)
instance GHC.Classes.Eq (Data.Trade.GTIN.GTIN n)
instance GHC.TypeNats.KnownNat n => Data.Data.Data (Data.Trade.GTIN.GTIN n)
instance GHC.TypeNats.KnownNat n => Data.Validity.Validity (Data.Trade.GTIN.GTIN n)
instance GHC.TypeNats.KnownNat n => GHC.Show.Show (Data.Trade.GTIN.GTIN n)
instance (n Data.Type.Ord.<= 19, GHC.TypeNats.KnownNat n) => GHC.Num.Num (Data.Trade.GTIN.GTIN n)
instance (n Data.Type.Ord.<= 19, GHC.TypeNats.KnownNat n) => GHC.Real.Real (Data.Trade.GTIN.GTIN n)
instance (n Data.Type.Ord.<= 19, GHC.TypeNats.KnownNat n) => GHC.Real.Integral (Data.Trade.GTIN.GTIN n)
instance (n Data.Type.Ord.<= 19, GHC.TypeNats.KnownNat n) => Test.QuickCheck.Arbitrary.Arbitrary (Data.Trade.GTIN.GTIN n)
instance Data.Hashable.Class.Hashable (Data.Trade.GTIN.GTIN n)
instance Data.Binary.Class.Binary (Data.Trade.GTIN.GTIN n)
instance GHC.TypeNats.KnownNat n => GHC.Enum.Bounded (Data.Trade.GTIN.GTIN n)
instance GHC.TypeNats.KnownNat n => GHC.Enum.Enum (Data.Trade.GTIN.GTIN n)
instance Language.Haskell.TH.Syntax.Lift (Data.Trade.GTIN.GTIN n)
